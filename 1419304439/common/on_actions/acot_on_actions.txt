on_planet_zero_pops = {
	events = {
		acot_exterminatus_event.1
		#acot_exterminatus_event.4
	}
}

# Planet has taken damage from orbital bombardment - Damage is applied daily
# This = Planet
# From = Bombarder
on_planet_bombarded = {
	events = {
		acot_exterminatus_event.0
		acot_exterminatus_event.4
		acot_exterminatus_event.7
		acot_exterminatus_event.100
		acot_orbital_defense_events.0
		acot_orbital_defense_events.1
		acot_orbital_defense_events.2
		#acot_exterminatus_event.200
	}
}

on_game_start = {
	events = {
		acot_precursor_databank.0
		acot_startup.1
	}
}

on_game_start_country = {
	events = {
		acot_startup.3
		acot_startup.4
		acot_startup.5
		#acot_startup.6
	}
}

on_yearly_pulse = {
	events = {
		acot_diplo.1
	}
}

# Fires for each planet every year (counting up from colonisation date, includes home planet)
on_colony_yearly_pulse = {
	events = {
		acot_ai_helper.3
	}
}

on_monthly_pulse = {
	events = {
	}
}

# this = country
on_monthly_pulse_country = {
	events = {
		stellarite_events.11 # Stellarite Reactor Check
	}
}

# Executed as a leader has died
# This = Country
# From = Leader
on_leader_death = {
	events = {
		#acot_mod_options.5
	}
}


# This = owner of fleet 1 (winner)
# From = owner of fleet 2 (loser)
# FromFrom = fleet 1
# FromFromFrom = fleet 2
on_space_battle_won = {
	events = {
		#acot_diplo.7
	}
}

#From = Planet scope
#This = Fleet scope
on_fleet_enter_orbit = {
	events = {
		acot_diplo.6
	}
}

# A country has increased the level of a tech, use last_increased_tech trigger to check tech and level.
# This = Country
on_tech_increased = {
	events = {
		acot_dark_matter_event.5
		acot_dark_matter_event.6
		acot_dark_matter_event.7		
		acot_dark_matter_event.8	
		acot_dark_matter_event.11
		acot_dark_matter_event.12

		acot_tech.15 ### Phanon Army Tech Grant Values

		acot_tech.20 ### ARMY UPGRADES

		acot_precursor_databank.906 # Add Precyur sor

		stellarite_events.5
		acot_tech.0
		
		acot_alpha_matter_events.2
		acot_alpha_matter_events.3
		acot_alpha_matter_events.5
		acot_precursor_databank.905
		acot_pmc.10000

		acot_herculean_events.100 # HERCULEAN REGIAN COUNT
	}
}

# A ship has been built
# Root = Ship
# From = Planet
on_ship_built = {
	events = {
		acot_ships.0
	}
}

# A ship has been upgraded
#  Root = Ship
on_ship_upgraded = {
	events = {
		#acot_ships.700
	}
}

# This = Ship
# From = Disabler Ship
on_ship_disabled = {
	events = {
		acot_ships.1
		acot_ships.3
		acot_pmc.10 # Phanon Starbase
	}
}

#An army construction has been completed.
# This = Planet
# From = Army
on_army_recruited = {
	events = {
		acot_tech.101
	}
}


on_leader_spawned = {
	events = {
		#acot_mod_options.6
	}
}


# A Megastructure has been built
# Root = Country
# From = Megastructure
# FromFrom = System
# FromFromFrom = Fleet
on_megastructure_built = {
	events = {
		acot_mega.0
		acot_mega.2
		acot_mega.200
	}
}

# A Megastructure has been upgraded
# Root = Country
# From = Megastructure
# FromFrom = System
on_megastructure_upgraded = {
	events = {
		acot_mega.1
		acot_mega.3
		acot_mega.4
		acot_mega.5
		acot_mega.300
		acot_herculean_events.9
	}
}

# Triggers when trying to open the diplomacy view for countries with custom diplomacy.
# Country scope
# This = target country (player)
# From = source country
on_custom_diplomacy = {
	events = {
		acot_precursor_databank.1
		acot_precursor_databank.2
		acot_pmc.2
		acot_pmc.201
		acot_pmc.203
	}
}

# Triggers country_event for the attacker upon victory
# (Before controller is switched)
# This = country, leader attacker
# From = country, planet owner
# FromFrom = planet
# IDENTITIES: attacker is the side that "IsHostile" to
# the planet controller; e.g. spawned monster armies
# are attackers, but if they win and the player attempts
# to retake the planet, the player is the attacker
on_planet_attackers_win = {
	events = {
		acot_ships.11
		acot_pmc.11 # Phanon Vault Capture
	}
}

# Triggers country_event for the defender upon victory
# Root = country, planet owner
# From = country, attack leader
# FromFrom = planet
on_planet_defenders_win = {
	events = {
		#acot_ships.12
	}
}

#This = destroyed country
#From = optional, destroyer (country)
on_country_destroyed = {
	events = {
		acot_war_in_hell.16 
		acot_war_in_hell.17 
		acot_test_event.50
	}
}

# A fleet has entered a system
# Scope = Fleet
# From = System
on_entering_system_fleet = {
	events = {
		acot_pmc.0
	}
}

# A fleet executes a move order to exit borders
# Scope = Fleet
# From = Origin System
# FromFrom = Destination System
on_crossing_border = {
	events = {
		acot_ships.6
		acot_ships.130 ### HERCULEAN GARRISON SURVIVES
	}
}


# Executed right after country has established communications with another country
# This = Country which established the communications
# From = Country which communications were established with
on_post_communications_established = {
	events = {
		acot_pmc.1
	}
}

# This = owner of fleet 1
# From = owner of fleet 2
# FromFrom = fleet 1
# FromFromFrom = fleet 2
on_entering_battle = {
	events = {
		acot_pmc.9 # On Attacking Phanon
		acot_ships.13 # HERCULEAN GARRISON
		acot_ships.21
	}
}


# Triggers country_event for the defender upon victory
# Root = country, planet owner
# From = country, attack leader
# FromFrom = planet
on_planet_defenders_win = {
	events = {
		acot_planets.1
		acot_pmc.1200 ### PHANON INVASION VICTORY 1
		acot_pmc.1300 ### PHANON INVASION VICTORY 2
		acot_pmc.1400 ### PHANON INVASION VICTORY 3
		acot_pmc.1500 ### PHANON INVASION VICTORY 4

		acot_pmc.9102 ### PHANON RETALIATION TWARTED

		acot_army_events.4 ## FORTIFICATION LOSS
	}
}

# Triggers country_event for the defender upon defeat
# This = country, planet owner
# From = country, attack leader
# FromFrom = planet
on_planet_defenders_lose = {
	events = {
		acot_planets.2
		acot_pmc.1299 ### PHANON INVASION FAILURE
		acot_army_events.4 ## FORTIFICATION LOSS
		acot_army_events.5 ## DEFENSE UPGRADE LOSS
	}
}

# Planet has reached 0 pops from orbital bombardment
# This = Planet
# From = Bombarder
on_planet_zero_pops = {
	events = {
		acot_pmc.1298 ### PHANON INVASION FAILURE
	}
}

# Planet has reached 0 pops from collateral damage
# This = Planet
# From = Army owner
on_planet_zero_pops_ground_combat = {
	events = {
		acot_pmc.1298 ### PHANON INVASION FAILURE
	}
}

# This = owner of ship 1 (destroyed)
# From = owner of ship 2 (combatant)
# FromFrom = ship 1
# FromFromFrom = ship 2
on_ship_destroyed_victim = {
	events = {
		acot_tech.2500
	}
}

# This = owner of ship 1 (combatant)
# From = owner of ship 2 (destroyed)
# FromFrom = ship 1
# FromFromFrom = ship 2
on_ship_destroyed_perp = {
	events = {
		stellarite_events.1005
		acot_dark_matter_event.3
		acot_pmc.9000 ### PHANON SHIP KIL SCORE
		acot_pmc.9900 ### PHANON Starbase Create
	}
}

# A war has ended
# Root = Loser
# From = Main Winner
on_war_ended = {
	events = {
		acot_tech.2501
	}
}

# Fires for each planet every 5 years (counting up from colonisation date, includes home planet)
on_colony_5_year_pulse = {
	events = {
		acot_planets.3000 ### VOID LIFEFORMS ATTACK
		acot_pmc.9100 ### PHANON ATTACK RETALIATION
	}
}

#An army has been killed in ground combat
# This = owner
# From = army
# FromFrom = opponent
# FromFromFrom = planet
on_army_killed_in_combat = {
	events = {
		acot_army_events.1
		acot_army_events.3
	}
}

#An army has ceased to exist for any other reason
# This = country
# From = army
on_army_killed_no_combat = {
	events = {
		acot_army_events.1
		acot_army_events.3
	}
}

# No scope, like on_game_start
# Does not run when loading MP saves due to OOS concerns
on_single_player_save_game_load = {
	events = {
		#acot_startup.9998 ### WHEN THE GAME IS WRONG VERSION	
	}
}

# Fired when a fleet activates cloaking
# This = Fleet
on_cloaking_activated = {
	events = {
		acot_ships.23 ## LIGHT
	}
}

# Fired when cloaking is deactivated for a fleet (voluntarily or involuntarily)
# This = Fleet
on_cloaking_deactivated = {
	events = {
		acot_ships.22 ## DIMENSIONAL
		acot_ships.24 ## HEAVY
	}
}