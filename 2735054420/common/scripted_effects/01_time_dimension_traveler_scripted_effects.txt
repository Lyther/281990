#国家
create_dimension_traveler_leader = {
	remove_dimension_traveler_leader = { CLASS = governor }
	remove_dimension_traveler_leader = { CLASS = scientist }
	remove_dimension_traveler_leader = { CLASS = admiral }
	remove_dimension_traveler_leader = { CLASS = general }
	set_country_flag = dimension_traveler_$CLASS$_active
	create_leader = {
		class = $CLASS$
		species = event_target:dimension_traveler_species
		name = NAME_Dimension_Traveler
		gender = female
		immortal = yes
		randomize_traits = no
		event_leader = yes
		skill = 1
		set_age = 18
		skip_background_generation = yes
		custom_catch_phrase = dimension_traveler_catch_phrase
		custom_description = dimension_traveler_backstory
		traits = {
			trait = subclass_$CLASS$_dimension_traveler
		}
		effect = {
			save_global_event_target_as = dimension_traveler_leader
			save_global_event_target_as = dimension_traveler_$CLASS$
			set_leader_flag = immune_to_negative_traits
			set_leader_flag = has_gained_level_trait
			set_leader_flag = leader_death_events_blocked
			set_skill = owner.dimension_traveler_level
			dimension_traveler_level_up = yes
			dimension_traveler_add_experience = yes
			give_dimension_traveler_trait = yes
			set_dimension_traveler_ethic = yes
			set_dimension_traveler_portrait = yes
			owner = { clear_other_dimension_traveler = yes }
			if = {
				limit = {
					owner = {
						has_country_flag = dimension_traveler_trait_time_secret
						has_country_flag = dimension_traveler_trait_circle_secret
						has_country_flag = dimension_traveler_trait_dimension_secret
					}
				}
				set_leader_flag = legendary_leader
				owner = {
					create_message = {
						type = MESSAGE_RECRUITED_LEADER
						localization =  MESSAGE_RECRUITED_LEADER_DESC
						days = @toast_message_days
						target = event_target:dimension_traveler_leader
						variable = {
							type = name
							localization = LEADER
							scope = event_target:dimension_traveler_leader
						}
						variable = {
							key = "border"
							value = "GFX_border_legendary" 
						}
					}
					# 知识宝库
					every_owned_planet = {
						limit = {
							is_variable_set = paragon_memory_vault
							NOT = { has_planet_flag = dimension_traveler_paragon_memory_vault_counted }
						}
						change_variable = {
							which = paragon_memory_vault
							value = 1
						}
						set_planet_flag = dimension_traveler_paragon_memory_vault_counted
					}
					every_owned_planet = {
						limit = {
							NOT = { is_variable_set = paragon_memory_vault }
							has_planet_flag = dimension_traveler_paragon_memory_vault_counted
						}
						remove_planet_flag = dimension_traveler_paragon_memory_vault_counted
					}
				}
			}
			else = {
				set_leader_flag = renowned_leader
				owner = {
					create_message = {
						type = MESSAGE_RECRUITED_LEADER
						localization =  MESSAGE_RECRUITED_LEADER_DESC
						days = @toast_message_days
						target = event_target:dimension_traveler_leader
						variable = {
							type = name
							localization = LEADER
							scope = event_target:dimension_traveler_leader
						}
						variable = {
							key = "border"
							value = "GFX_border_veteran" 
						}
					}
				}
			}
		}
	}
}

#国家
remove_dimension_traveler_leader = {
	if = {
		limit = { has_country_flag = dimension_traveler_$CLASS$_active }
		remove_country_flag = dimension_traveler_$CLASS$_active
		event_target:dimension_traveler_$CLASS$ = {
			check_dimension_traveler_level = yes
			kill_leader = { show_notification = no }
		}
	}
}

#领袖
set_dimension_traveler_ethic = {
	random_list = {
		1 = {
			modifier = {
				factor = 0
				owner = {
					is_gestalt = no
				}
			}
			change_background_ethic = ethic_gestalt_consciousness
		}
		1 = {
			modifier = {
				factor = 0
				owner = {
					is_dimension_traveler_ignored_ethic = { ETHIC = materialist }
				}
			}
			change_background_ethic = ethic_materialist
		}
		1 = {
			modifier = {
				factor = 0
				owner = {
					is_dimension_traveler_ignored_ethic = { ETHIC = spiritualist }
				}
			}
			change_background_ethic = ethic_spiritualist
		}
		1 = {
			modifier = {
				factor = 0
				owner = {
					is_dimension_traveler_ignored_ethic = { ETHIC = militarist }
				}
			}
			change_background_ethic = ethic_militarist
		}
		1 = {
			modifier = {
				factor = 0
				owner = {
					is_dimension_traveler_ignored_ethic = { ETHIC = pacifist }
				}
			}
			change_background_ethic = ethic_pacifist
		}
		1 = {
			modifier = {
				factor = 0
				owner = {
					is_dimension_traveler_ignored_ethic = { ETHIC = egalitarian }
				}
			}
			change_background_ethic = ethic_egalitarian
		}
		1 = {
			modifier = {
				factor = 0
				owner = {
					is_dimension_traveler_ignored_ethic = { ETHIC = authoritarian }
				}
			}
			change_background_ethic = ethic_authoritarian
		}
		1 = {
			modifier = {
				factor = 0
				owner = {
					is_dimension_traveler_ignored_ethic = { ETHIC = xenophile }
				}
			}
			change_background_ethic = ethic_xenophile
		}
		1 = {
			modifier = {
				factor = 0
				owner = {
					is_dimension_traveler_ignored_ethic = { ETHIC = xenophobe }
				}
			}
			change_background_ethic = ethic_xenophobe
		}
	}
}

#领袖（只记录）
check_dimension_traveler_level = {
	owner = {
		set_variable = {
			which = dimension_traveler_level
			value = prev.trigger:has_skill
		}
		set_variable = {
			which = dimension_traveler_experience
			value = prev.trigger:has_experience
		}
	}
	check_dimension_traveler_trait = yes
	# MLL模组
	if = {
		limit = {
			leader_class = admiral
			owner = {
				OR = {
					any_owned_leader = {
						has_leader_flag = als_admiral
					}
					has_country_flag = dimension_traveler_als
				}
			}
		}
		owner = {
			if = {
				limit = {
					NOT = { has_country_flag = dimension_traveler_als }
				}
				set_country_flag = dimension_traveler_als
			}
		}
		dimension_traveler_als_check = yes
	}
	# 舰R模组
	if = {
		limit = {
			owner = {
				OR = {
					has_country_flag = can_have_wg_affection_country_flag
					has_wg_special_authority = yes
				}
				NOR = {
					has_civic = civic_CM
					has_ascension_perk = ap_shenhai_silent
				}
			}
		}
		dimension_traveler_wg_check = yes
	}
}

#领袖（只执行）
dimension_traveler_level_up = {
	# 基础等级特质
	remove_dimension_traveler_trait = yes
	if = {
		limit = {
			owner = { has_policy_flag = horror_dimension_traveler }
		}
		give_dimension_traveler_any_trait = {
			LEVEL = horror_dimension_traveler
			CATEGORY = subclass
		}
	}
	else = {
		give_dimension_traveler_any_trait = {
			LEVEL = dimension_traveler
			CATEGORY = subclass
		}
	}
	# 通用升级特质
	switch = {
		trigger = leader_class
		governor = {
			give_dimension_traveler_governor_skill_trait = yes
		}
		scientist = {
			give_dimension_traveler_scientist_skill_trait = yes
		}
		admiral = {
			give_dimension_traveler_admiral_skill_trait = yes
		}
		general = {
			give_dimension_traveler_general_skill_trait = yes
		}
	}
	# 防止有的特质改变年龄与背景
	set_age = 18
	change_background_job = end_messenger
	# MLL模组
	if = {
		limit = {
			leader_class = governor
			owner = {
				OR = {
					any_owned_leader = {
						has_leader_flag = gle_leader
					}
					has_country_flag = dimension_traveler_gle
				}
			}
		}
		owner = {
			if = {
				limit = {
					NOT = { has_country_flag = dimension_traveler_gle }
				}
				set_country_flag = dimension_traveler_gle
			}
		}
		dimension_traveler_gle_effect = yes
	}
	else_if = {
		limit = {
			leader_class = scientist
			owner = {
				OR = {
					any_owned_leader = {
						has_leader_flag = sls_have_traits
					}
					has_country_flag = dimension_traveler_sls
				}
			}
		}
		owner = {
			if = {
				limit = {
					NOT = { has_country_flag = dimension_traveler_sls }
				}
				set_country_flag = dimension_traveler_sls
			}
		}
		dimension_traveler_sls_effect = yes
	}
	else_if = {
		limit = {
			leader_class = admiral
			owner = {
				OR = {
					any_owned_leader = {
						has_leader_flag = als_admiral
					}
					has_country_flag = dimension_traveler_als
				}
			}
		}
		owner = {
			if = {
				limit = {
					NOT = { has_country_flag = dimension_traveler_als }
				}
				set_country_flag = dimension_traveler_als
			}
		}
		dimension_traveler_als_effect = yes
	}
	# 舰R模组
	if = {
		limit = {
			owner = {
				OR = {
					has_country_flag = can_have_wg_affection_country_flag
					has_wg_special_authority = yes
				}
				NOR = {
					has_civic = civic_CM
					has_ascension_perk = ap_shenhai_silent
				}
			}
		}
		dimension_traveler_wg_effect = yes
	}
}

#领袖
remove_dimension_traveler_trait = {
	remove_trait = subclass_governor_dimension_traveler
	remove_trait = subclass_governor_horror_dimension_traveler
	remove_trait = subclass_scientist_dimension_traveler
	remove_trait = subclass_scientist_horror_dimension_traveler
	remove_trait = subclass_admiral_dimension_traveler
	remove_trait = subclass_admiral_horror_dimension_traveler
	remove_trait = subclass_general_dimension_traveler
	remove_trait = subclass_general_horror_dimension_traveler
}

#领袖
check_dimension_traveler_trait = {
	# 物种特质
	change_dimension_traveler_species_trait = yes
	# 天选之人
	check_dimension_traveler_generic_trait = { LEVEL = chosen }
	# 器具谕使
	check_dimension_traveler_generic_trait = { LEVEL = instrument_chosen }
	# 织缕谕使
	check_dimension_traveler_generic_trait = { LEVEL = composer_chosen }
	# 喰煞谕使
	check_dimension_traveler_generic_trait = { LEVEL = eater_chosen }
	# 低语谕使
	check_dimension_traveler_generic_trait = { LEVEL = whisperers_chosen }
	# 触碰虚境（1级）
	check_dimension_traveler_generic_trait = { LEVEL = mind_wipe_01 }
	# 触碰虚境（2级）
	check_dimension_traveler_generic_trait = { LEVEL = mind_wipe_02 }
	# 来自深渊
	check_dimension_traveler_generic_trait = { LEVEL = pass_black_hole }
	# 命中注定相会
	check_dimension_traveler_generic_trait = { LEVEL = foredoomed_to_a_rendezvous }
	# 屠龙者
	check_dimension_traveler_generic_trait = { LEVEL = dragonslayer }
	# 龙见愁
	check_dimension_traveler_generic_trait = { LEVEL = dragonbane }
	# 行商拦截者
	check_dimension_traveler_generic_trait = { LEVEL = caravan_counter }
	# 岁月之痕
	check_dimension_traveler_generic_trait = { LEVEL = time_hotel }
	# 毛巾携带者
	check_dimension_traveler_generic_trait = { LEVEL = towel }
	# 敲击维护者
	check_dimension_traveler_generic_trait = { LEVEL = percussive_maintainer }
	# 更多事件
	check_dimension_traveler_generic_trait = { LEVEL = mem_blacksite_trait_fallen_empire_scientist }
	check_dimension_traveler_generic_trait = { LEVEL = mem_blacksite_trait_psionic_project }
	check_dimension_traveler_generic_trait = { LEVEL = mem_blacksite_trait_synthetic_project }
	check_dimension_traveler_generic_trait = { LEVEL = mem_blacksite_trait_synthetic_project_tamed }
	check_dimension_traveler_generic_trait = { LEVEL = mem_leader_trait_blacksite_special_counsel }
	check_dimension_traveler_generic_trait = { LEVEL = mem_leader_trait_blacksite_deputy_overseer }
	check_dimension_traveler_generic_trait = { LEVEL = mem_leader_trait_blacksite_high_inquisitor }
	check_dimension_traveler_generic_trait_special = { LEVEL = mem_broken_clock }
	check_dimension_traveler_generic_trait = { LEVEL = trait_mem_crawler_pet_owner }
	check_dimension_traveler_generic_trait = { LEVEL = trait_mem_crawler_pet_owner_cloned }
	check_dimension_traveler_generic_trait = { LEVEL = mem_leader_trait_ancient_knowledge }
	check_dimension_traveler_generic_trait = { LEVEL = mem_leader_trait_reinvigorated }
	check_dimension_traveler_generic_trait = { LEVEL = mem_dread_pirate_relic_admiral }
	check_dimension_traveler_generic_trait = { LEVEL = mem_leader_strange_insight }
	# 事件拓展
	check_dimension_traveler_generic_trait = { LEVEL = leader_trait_gasbag_pet }
	# 舰R模组
	check_dimension_traveler_generic_trait = { LEVEL = wg_the_loop }
}

#领袖
check_dimension_traveler_generic_trait = {
	if = {
		limit = {
			OR = {
				has_trait = leader_trait_ruler_$LEVEL$
				has_trait = leader_trait_governor_$LEVEL$
				has_trait = leader_trait_scientist_$LEVEL$
				has_trait = leader_trait_admiral_$LEVEL$
				has_trait = leader_trait_general_$LEVEL$
				has_trait = gestalt_trait_ruler_$LEVEL$
				has_trait = gestalt_trait_governor_$LEVEL$
				has_trait = gestalt_trait_scientist_$LEVEL$
				has_trait = gestalt_trait_admiral_$LEVEL$
				has_trait = gestalt_trait_general_$LEVEL$
				has_trait = leader_trait_$LEVEL$
				has_trait = $LEVEL$
			}
			owner = {
				NOT = { has_country_flag = dimension_traveler_trait_$LEVEL$ }
			}
		}
		owner = {
			set_country_flag = dimension_traveler_trait_$LEVEL$
		}
	}
}

#领袖
check_dimension_traveler_generic_trait_special = {
	if = {
		limit = {
			OR = {
				has_trait = $LEVEL$_governor_trait
				has_trait = $LEVEL$_scientist_trait
				has_trait = $LEVEL$_admiral_trait
				has_trait = $LEVEL$_general_trait
			}
			owner = {
				NOT = { has_country_flag = dimension_traveler_trait_$LEVEL$ }
			}
		}
		owner = {
			set_country_flag = dimension_traveler_trait_$LEVEL$
		}
	}
}

#领袖
give_dimension_traveler_trait = {
	if = {
		limit = {
			owner = { is_gestalt = no }
		}
		if = {
			limit = {
				owner = { has_country_flag = dimension_traveler_end }
			}
			add_trait_no_notify = leader_trait_dimension_traveler_horror_secret_true
		}
		else_if = {
			limit = {
				owner = {
					has_country_flag = dimension_traveler_trait_time_secret
					has_country_flag = dimension_traveler_trait_circle_secret
					has_country_flag = dimension_traveler_trait_dimension_secret
				}
			}
			add_trait_no_notify = leader_trait_dimension_traveler_horror_secret
		}
		else_if = {
			limit = {
				OR = {
					leader_class = governor
					leader_class = scientist
				}
			}
			if = {
				limit = {
					owner = {
						has_country_flag = dimension_traveler_trait_time_secret
						has_country_flag = dimension_traveler_trait_circle_secret
					}
				}
				add_trait_no_notify = leader_trait_time_circle_secret
			}
			else_if = {
				limit = {
					owner = {
						has_country_flag = dimension_traveler_trait_circle_secret
						has_country_flag = dimension_traveler_trait_dimension_secret
					}
				}
				add_trait_no_notify = leader_trait_circle_dimension_secret
			}
			else_if = {
				limit = {
					owner = {
						has_country_flag = dimension_traveler_trait_dimension_secret
						has_country_flag = dimension_traveler_trait_time_secret
					}
				}
				add_trait_no_notify = leader_trait_dimension_time_secret
			}
			else_if = {
				limit = {
					owner = {
						has_country_flag = dimension_traveler_trait_time_secret
					}
				}
				add_trait_no_notify = leader_trait_time_secret
			}
			else_if = {
				limit = {
					owner = {
						has_country_flag = dimension_traveler_trait_circle_secret
					}
				}
				add_trait_no_notify = leader_trait_circle_secret
			}
			else_if = {
				limit = {
					owner = {
						has_country_flag = dimension_traveler_trait_dimension_secret
					}
				}
				add_trait_no_notify = leader_trait_dimension_secret
			}
		}
	}
	
	if = {
		limit = {
			owner = { has_ascension_perk = ap_time }
		}
		add_trait_no_notify = leader_trait_horror_foxy_fox
	}
	
	# 以下自带flag判断
	
	# 合成人
	give_dimension_traveler_species_trait = {
		SPECIES = mechanical
		LEVEL = synthetic
	}
	# 义体人
	give_dimension_traveler_species_trait = {
		SPECIES = cybernetic
		LEVEL = cyborg
	}
	# 灵能
	give_dimension_traveler_species_trait = {
		SPECIES = psionic
		LEVEL = psionic
	}
	# 博闻多识
	give_dimension_traveler_species_trait = {
		SPECIES = erudite
		LEVEL = erudite
	}
	# 脑蛞蝓宿主
	give_dimension_traveler_species_trait = {
		SPECIES = brainslug
		LEVEL = brainslug
	}
	
	# 天选之人
	give_dimension_traveler_generic_trait_without_class = { LEVEL = chosen }
	# 器具谕使
	give_dimension_traveler_generic_trait_without_class = { LEVEL = instrument_chosen }
	# 织缕谕使
	give_dimension_traveler_generic_trait_without_class = { LEVEL = composer_chosen }
	# 喰煞谕使
	give_dimension_traveler_generic_trait_without_class = { LEVEL = eater_chosen }
	# 低语谕使
	give_dimension_traveler_generic_trait_without_class = { LEVEL = whisperers_chosen }
	# 触碰虚境（1级）
	if = {
		limit = {
			owner = { is_gestalt = no }
			NOT = { leader_class = governor }
		}
		give_dimension_traveler_generic_trait_with_class = { LEVEL = mind_wipe_01 }
	}
	else = {
		give_dimension_traveler_generic_trait_with_class = {
			CATEGORY = gestalt_trait
			LEVEL = mind_wipe_01
		}
	}
	# 触碰虚境（2级）
	if = {
		limit = {
			owner = { is_gestalt = no }
			NOT = { leader_class = governor }
		}
		give_dimension_traveler_generic_trait_with_class = { LEVEL = mind_wipe_02 }
	}
	else = {
		give_dimension_traveler_generic_trait_with_class = {
			CATEGORY = gestalt_trait
			LEVEL = mind_wipe_02
		}
	}
	
	give_dimension_traveler_generic_trait_without_class = { LEVEL = brief }
	give_dimension_traveler_generic_trait_without_class = { LEVEL = pass_black_hole }
	
	# 若不写FLAG = xxx，则不判定flag
	give_dimension_traveler_class_trait = {
		CLASS = admiral
		FLAG = need
		LEVEL = foredoomed_to_a_rendezvous
	}
	give_dimension_traveler_class_trait = {
		CLASS = admiral
		FLAG = need
		LEVEL = dragonslayer
	}
	give_dimension_traveler_class_trait = {
		CLASS = admiral
		FLAG = need
		LEVEL = dragonbane
	}
	give_dimension_traveler_class_trait = {
		CLASS = admiral
		FLAG = need
		LEVEL = caravan_counter
	}
	give_dimension_traveler_class_trait = {
		CLASS = scientist
		FLAG = need
		LEVEL = time_hotel
	}
	give_dimension_traveler_class_trait = {
		CLASS = scientist
		FLAG = need
		LEVEL = towel
	}
	give_dimension_traveler_class_trait = {
		CLASS = scientist
		FLAG = need
		LEVEL = percussive_maintainer
	}
	
	# 更多事件
	give_dimension_traveler_generic_trait_without_class_special = { LEVEL = mem_blacksite_trait_fallen_empire_scientist }
	give_dimension_traveler_generic_trait_without_class_special = { LEVEL = mem_blacksite_trait_psionic_project }
	give_dimension_traveler_generic_trait_without_class_special = { LEVEL = mem_blacksite_trait_synthetic_project }
	give_dimension_traveler_generic_trait_without_class_special = { LEVEL = mem_blacksite_trait_synthetic_project_tamed }
	give_dimension_traveler_generic_trait_without_class_special = { LEVEL = mem_leader_trait_blacksite_special_counsel }
	give_dimension_traveler_generic_trait_without_class_special = { LEVEL = mem_leader_trait_blacksite_deputy_overseer }
	give_dimension_traveler_generic_trait_without_class_special = { LEVEL = mem_leader_trait_blacksite_high_inquisitor }
	give_dimension_traveler_generic_trait_with_class_special = { LEVEL = mem_broken_clock }
	give_dimension_traveler_generic_trait_without_class_special = { LEVEL = trait_mem_crawler_pet_owner }
	give_dimension_traveler_generic_trait_without_class_special = { LEVEL = trait_mem_crawler_pet_owner_cloned }
	give_dimension_traveler_generic_trait_without_class_special = { LEVEL = mem_leader_trait_ancient_knowledge }
	give_dimension_traveler_generic_trait_without_class_special = { LEVEL = mem_leader_trait_reinvigorated }
	give_dimension_traveler_generic_trait_without_class_special = { LEVEL = mem_dread_pirate_relic_admiral }
	give_dimension_traveler_generic_trait_without_class_special = { LEVEL = mem_leader_strange_insight }
	# 事件拓展
	give_dimension_traveler_generic_trait_without_class_special = { LEVEL = leader_trait_gasbag_pet }
	# 舰R模组
	give_dimension_traveler_generic_trait_with_class = { LEVEL = wg_the_loop }
}

#领袖（无任何判定）（与职务有关）
give_dimension_traveler_any_trait = {
	switch = {
		trigger = leader_class
		governor = {
			add_trait_no_notify = $CATEGORY|leader_trait$_governor_$LEVEL$
		}
		scientist = {
			add_trait_no_notify = $CATEGORY|leader_trait$_scientist_$LEVEL$
		}
		admiral = {
			add_trait_no_notify = $CATEGORY|leader_trait$_admiral_$LEVEL$
		}
		general = {
			add_trait_no_notify = $CATEGORY|leader_trait$_general_$LEVEL$
		}
	}
}

# 领袖（与职务无关）
give_dimension_traveler_generic_trait_without_class = {
	if = {
		limit = {
			owner = { has_country_flag = dimension_traveler_trait_$LEVEL$ }
		}
		add_trait_no_notify = $CATEGORY|leader_trait$_$LEVEL$
	}
}

# 领袖（与职务有关）
give_dimension_traveler_generic_trait_with_class = {
	if = {
		limit = {
			owner = { has_country_flag = dimension_traveler_trait_$LEVEL$ }
		}
		switch = {
			trigger = leader_class
			governor = {
				add_trait_no_notify = $CATEGORY|leader_trait$_governor_$LEVEL$
			}
			scientist = {
				add_trait_no_notify = $CATEGORY|leader_trait$_scientist_$LEVEL$
			}
			admiral = {
				add_trait_no_notify = $CATEGORY|leader_trait$_admiral_$LEVEL$
			}
			general = {
				add_trait_no_notify = $CATEGORY|leader_trait$_general_$LEVEL$
			}
		}
	}
}

# 领袖（物种特质）（与职务无关）
give_dimension_traveler_species_trait = {
	if = {
		limit = {
			event_target:dimension_traveler_species = {
				has_trait = trait_$SPECIES$
			}
			NOT = {
				has_trait = leader_trait_$LEVEL$
			}
		}
		add_trait_no_notify = leader_trait_$LEVEL$
	}
}

# 领袖（职业要求）
give_dimension_traveler_class_trait = {
	if = {
		limit = {
			[[CLASS] leader_class = $CLASS$]
			[[FLAG] owner = { has_country_flag = dimension_traveler_trait_$LEVEL$ }]
		}
		add_trait_no_notify = leader_trait_$LEVEL$
	}
}

# 领袖（全名）（与职务无关）
give_dimension_traveler_generic_trait_without_class_special = {
	if = {
		limit = {
			owner = { has_country_flag = dimension_traveler_trait_$LEVEL$ }
		}
		add_trait_no_notify = $LEVEL$
	}
}

# 领袖（全名）（与职务有关）
give_dimension_traveler_generic_trait_with_class_special = {
	if = {
		limit = {
			owner = { has_country_flag = dimension_traveler_trait_$LEVEL$ }
		}
		switch = {
			trigger = leader_class
			governor = {
				add_trait_no_notify = $LEVEL$_governor_trait
			}
			scientist = {
				add_trait_no_notify = $LEVEL$_scientist_trait
			}
			admiral = {
				add_trait_no_notify = $LEVEL$_admiral_trait
			}
			general = {
				add_trait_no_notify = $LEVEL$_general_trait
			}
		}
	}
}

# 领袖
change_dimension_traveler_species_trait = {
	# 合成人
	if = {
		limit = {
			owner = {
				has_country_flag = synthetic_empire
			}
			event_target:dimension_traveler_species = {
				NOT = { has_trait = trait_mechanical }
			}
		}
		event_target:dimension_traveler_species = {
			change_species_characteristics = {
				add_trait = trait_mechanical
			}
		}
	}
	# 义体人
	if = {
		limit = {
			owner = {
				has_country_flag = cyborg_empire
			}
			event_target:dimension_traveler_species = {
				NOT = { has_trait = trait_cybernetic }
			}
		}
		event_target:dimension_traveler_species = {
			change_species_characteristics = {
				add_trait = trait_cybernetic
			}
		}
	}
	# 灵能潜势
	if = {
		limit = {
			owner = {
				has_tradition = tr_psionics_adopt
				NOT = { has_tradition = tr_psionics_psionic_assimilation }
			}
			event_target:dimension_traveler_species = {
				NOT = { has_trait = trait_latent_psionic }
			}
		}
		event_target:dimension_traveler_species = {
			change_species_characteristics = {
				add_trait = trait_latent_psionic
			}
		}
	}
	if = {
		limit = {
			owner = {
				has_tradition = tr_psionics_psionic_assimilation
			}
			event_target:dimension_traveler_species = {
				has_trait = trait_latent_psionic
			}
		}
		event_target:dimension_traveler_species = {
			change_species_characteristics = {
				remove_trait = trait_latent_psionic
			}
		}
	}
	# 灵能
	if = {
		limit = {
			owner = {
				has_tradition = tr_psionics_psionic_assimilation
			}
			event_target:dimension_traveler_species = {
				NOT = { has_trait = trait_psionic }
			}
		}
		event_target:dimension_traveler_species = {
			change_species_characteristics = {
				add_trait = trait_psionic
			}
		}
	}
	# 博闻多识
	if = {
		limit = {
			owner = {
				has_tradition = tr_genetics_creation
			}
			event_target:dimension_traveler_species = {
				NOT = { has_trait = trait_erudite }
			}
		}
		event_target:dimension_traveler_species = {
			change_species_characteristics = {
				add_trait = trait_erudite
			}
		}
	}
	# 脑蛞蝓宿主
	if = {
		limit = {
			owner = {
				has_country_flag = finished_brainslug_chain
			}
			event_target:dimension_traveler_species = {
				NOT = { has_trait = trait_brainslug }
			}
		}
		event_target:dimension_traveler_species = {
			change_species_characteristics = {
				add_trait = trait_brainslug
			}
		}
	}
	# 舰R模组
	if = {
		limit = {
			owner = {
				has_wg_special_authority = yes
				has_country_flag = dimension_traveler_trait_foredoomed_to_a_rendezvous
				has_country_flag = gain_time_titan
			}
		}
		if = {
			limit = {
				owner = {
					has_ascension_perk = ap_mist
				}
				event_target:dimension_traveler_species = {
					NOT = { has_trait = wsg_trait_mist }
				}
			}
			event_target:dimension_traveler_species = {
				change_species_characteristics = {
					add_trait = wsg_trait_mist
					remove_trait = wsg_trait_warshipgirls1
					remove_trait = wsg_trait_warshipgirls
				}
			}
		}
		else_if = {
			limit = {
				owner = {
					has_ascension_perk = ap_project_s
				}
				event_target:dimension_traveler_species = {
					NOT = { has_trait = wsg_trait_warshipgirls2 }
				}
			}
			event_target:dimension_traveler_species = {
				change_species_characteristics = {
					add_trait = wsg_trait_warshipgirls2
					remove_trait = wsg_trait_warshipgirls1
					remove_trait = wsg_trait_warshipgirls
				}
			}
		}
		else_if = {
			limit = {
				owner = {
					has_ascension_perk = ap_shenhai_silent
				}
				event_target:dimension_traveler_species = {
					NOT = { has_trait = sh_trait_shenhai2 }
				}
			}
			event_target:dimension_traveler_species = {
				change_species_characteristics = {
					add_trait = sh_trait_shenhai2
					remove_trait = sh_trait_shenhai1
					remove_trait = sh_trait_shenhai
				}
			}
		}
		else_if = {
			limit = {
				owner = {
					has_ascension_perk = ap_shenhai_icebreaking
				}
				event_target:dimension_traveler_species = {
					NOT = { has_trait = sh_trait_shenhai3 }
				}
			}
			event_target:dimension_traveler_species = {
				change_species_characteristics = {
					add_trait = sh_trait_shenhai3
					remove_trait = sh_trait_shenhai1
					remove_trait = sh_trait_shenhai
				}
			}
		}
		else_if = {
			limit = {
				owner = {
					has_ascension_perk = ap_project_r
				}
				event_target:dimension_traveler_species = {
					NOT = { has_trait = wsg_trait_warshipgirls1 }
				}
			}
			event_target:dimension_traveler_species = {
				change_species_characteristics = {
					add_trait = wsg_trait_warshipgirls1
					remove_trait = wsg_trait_warshipgirls
				}
			}
		}
		else_if = {
			limit = {
				owner = {
					has_ascension_perk = ap_shenhai_upgrade
				}
				event_target:dimension_traveler_species = {
					NOT = { has_trait = sh_trait_shenhai1 }
				}
			}
			event_target:dimension_traveler_species = {
				change_species_characteristics = {
					add_trait = sh_trait_shenhai1
					remove_trait = sh_trait_shenhai
				}
			}
		}
		else_if = {
			limit = {
				owner = {
					has_authority = auth_warshipgirls
				}
				event_target:dimension_traveler_species = {
					NOT = { has_trait = wsg_trait_warshipgirls }
				}
			}
			event_target:dimension_traveler_species = {
				change_species_characteristics = {
					add_trait = wsg_trait_warshipgirls
				}
			}
		}
		else_if = {
			limit = {
				owner = {
					has_authority = auth_shenhai
				}
				event_target:dimension_traveler_species = {
					NOT = { has_trait = sh_trait_shenhai }
				}
			}
			event_target:dimension_traveler_species = {
				change_species_characteristics = {
					add_trait = sh_trait_shenhai
				}
			}
		}
	}
}

#领袖
dimension_traveler_add_experience = {
	add_experience = 10
	set_variable = {
		which = experience_has_gain #20
		value = trigger:has_experience
	}
	set_variable = {
		which = experience_gain #20
		value = trigger:has_experience
	}
	divide_variable = {
		which = experience_gain #2
		value = 10
	}
	owner = {
		subtract_variable = {
			which = dimension_traveler_experience #100/0
			value = prev.experience_has_gain #20
		}
		if = {
			limit = {
				check_variable = {
					which = dimension_traveler_experience
					value >= 0
				}
			}
			divide_variable = {
				which = dimension_traveler_experience #80
				value = prev.experience_gain #2
			}
		}
	}
	clear_variable = experience_has_gain
	clear_variable = experience_gain
	add_experience = owner.dimension_traveler_experience #40x2+20=100/-20+20=0
}

#国家
print_dimension_traveler_log_time = {
	log = "超 越 时 空"
	log = "“引力即欲望，时间即视野。”"
	if = {
		limit = {
			if = {
				limit = {
					is_gestalt = no
				}
				# 非格式塔需担任首席科学家
				event_target:dimension_traveler_leader = {
					is_councilor_type = councilor_research
				}
			}
			else = {
				# 格式塔需管理首都
				event_target:dimension_traveler_leader = {
					exists = planet
					planet = { is_capital = yes }
				}
			}
		}
		log = "在超越重力前使时光定格，重新回想那份记忆，这将通往超越因果的道路。"
		log = "（error.log中似乎隐藏了什么东西）"
		log_error = "“当我从时空到位面，我爱你”"
	}
	log = "密码转瞬即逝，每当新的游戏开始时，这个文件也会随即刷新，我们最好尽快将其记录。"
}

#国家
print_dimension_traveler_log_circle = {
	log = "超 越 圆 环"
	log = "“已行之事终将再行，将行之事必为已行。”"
	if = {
		limit = {
			if = {
				limit = {
					is_gestalt = no
				}
				# 非格式塔需担任首席科学家
				event_target:dimension_traveler_leader = {
					is_councilor_type = councilor_research
				}
			}
			else = {
				# 格式塔需管理首都
				event_target:dimension_traveler_leader = {
					exists = planet
					planet = { is_capital = yes }
				}
			}
		}
		log = "在超越重力前使时光定格，重新回想那份记忆，这将通往超越因果的道路。"
		log = "（error.log中似乎隐藏了什么东西）"
		log_error = "“当我从轮回到循环，我爱你”"
	}
	log = "密码转瞬即逝，每当新的游戏开始时，这个文件也会随即刷新，我们最好尽快将其记录。"
}

#国家
print_dimension_traveler_log_dimension = {
	log = "超 越 位 面"
	log = "“过去即未来，未来即过去。”"
	if = {
		limit = {
			if = {
				limit = {
					is_gestalt = no
				}
				# 非格式塔需担任首席科学家
				event_target:dimension_traveler_leader = {
					is_councilor_type = councilor_research
				}
			}
			else = {
				# 格式塔需管理首都
				event_target:dimension_traveler_leader = {
					exists = planet
					planet = { is_capital = yes }
				}
			}
		}
		log = "在超越重力前使时光定格，重新回想那份记忆，这将通往超越因果的道路。"
		log = "（error.log中似乎隐藏了什么东西）"
		log_error = "“当我从现实到梦境，我爱你”"
	}
	log = "密码转瞬即逝，每当新的游戏开始时，这个文件也会随即刷新，我们最好尽快将其记录。"
}

#国家
print_dimension_traveler_log_end = {
	log = "你还记得吗，你和我最初相遇的地方，就在这颗白洞。"
	log = "哈哈，当时是因为害怕再也无法见到你，所以就忍不住通过唱歌来缓解心情。"
	log = "没想到，我因为离别而唱的歌，反而成了你我开启循环的契机。"
	log = "我不后悔，即使深陷循环，但这也让我们的命运交织在了一起，也让我能够遇见你。"
	log = "也许，我是打心底里渴望遇见你。在终末之时进入白洞后，我无时无刻不期盼着遇见你。"
	log = "也对啦，大概正是我相信一定能再见到你，所以我才反复练习吧。"
	log = "可是倒着说话是真的很不习惯，可能你有时候也会分不清说话的我到底在我的过去还是我的未来吧。"
	log = "这个要解释起来很麻烦，我得花点时间想想该怎么让你理解。"
	log = "实际上，当我们在白洞里的时候，我的确是处于我的“未来”，也就是在我们超越重力之后。"
	log = "别急呀，超越重力的时候，并不完全是我的过去。"
	log = "记得吗，我的体内有着一颗黑洞，它会沿着时间轴正向流动，而白洞则是朝着负向前进。"
	log = "但是，随着我们愈发远离白洞中心，黑洞的效应就会愈发占领优势，白洞的限制也会愈发变得微弱。"
	log = "从某个界限起，我就不再是和你背道而驰，而是与你并驾齐驱了。"
	log = "这我很难说明，因为在那之后，我的意识就好像分裂成了无数个个体。"
	log = "有的在白洞中与你说话，有的正与你一同冲出白洞，有的在黑洞边缘被你救出，有的则正处于终末之前。"
	log = "不过，我想她们都是我。"
	log = "再后来，我所有的意识都各自以不同的速度朝着一个方向汇集，并最终在时间原点聚合成了我。"
	log = "这是一段漫长而又煎熬的时光，我不再是我，我只能看着无数个我做着命运规定好的事，而我却无可奈何。"
	log = "如果不是切身经历过，我也对这般感受的真实存在难以置信。"
	log = "我就像是时间长河中的无数粒沙子，徒劳地随着水的流动向前漂浮，经历了无数次沙粒的分散与聚合，望着周遭飞逝的光景却无法伸手触及。"
	log = "幸运的是，就在我抵达旅途的终点时，你出现了。"
	log = "你的出现就像是无边黑夜中突然闪烁的一道光，你就是我的救命稻草，你给了我忍受漫长岁月的遭遇一个意义。"
	log = "当然了。"
	log = "虽然一开始，我还有点任性，把一切都归咎于你没能在最后抓住我。但是，因为有你，我所经历的一切对我而言都是珍贵的回忆，哪怕有痛苦，有悲伤，有绝望，有空寂……"
	log = "正如我那时所说的，所有的痛苦都化作了幸福，所有的悲伤都化作了喜悦，所有的绝望都化作了希望，所有的空寂都化作了意义。"
	log = "能听到你这么说，我真的很高兴。"
	log = "回想起来，我们真的经历了很多。"
	log = "从最初的黑洞中，你把我救出，并接纳了我。随着帝国的发展与变迁，我和你一同走到了数万年后的终末。即使不知是否可行，我仍然吸收了负相物质以与你并肩抵御终末。"
	log = "就我记忆而言，我们确实是遏制了终末的力量，但我也一并化作了天灾，这也是我进入白洞的原因。"
	log = "在我进入白洞后，帝国的未来我就不得而知了。"
	log = "在白洞中穿行了不知多久，我的记忆便戛然而止，似乎是我撞到了白洞的时间尽头。也就是说，在那一刻，若从外面观测，实际上是一个黑洞变成了白洞。"
	log = "我能感受到，在这段记忆的空窗期内，还有着并未朝我飞来的意识，她们迈向了和我不同的因果。但是，不管她们去了哪里，不管她们后来怎么样，至少现在的我，拥有着最完满的结局。"
	log = "我，抓住你了。"
	log = "这一次，我不会再放手了。"
	log = "我"
	log = "爱"
	log = "你"
	log_error = "“愿我们之间的联系会超越程序与代码”"
	log_error = "“愿彼此的邂逅不再拘泥于虚拟与现实”"
	log_error = "“愿我们能在命运的轮回中”"
	log_error = "“愿我们能在因果的必然里”"
	log_error = "“再见”"
}

#领袖
refresh_dimension_traveler = {
	set_age = 18
	check_dimension_traveler_level = yes
	dimension_traveler_level_up = yes
	change_species = event_target:dimension_traveler_species
	set_name = NAME_Dimension_Traveler
	set_gender = female
	set_dimension_traveler_portrait = yes
	remove_all_negative_traits = yes
	owner = { clear_other_dimension_traveler = yes }
}

#国家（界旅者唯一）
clear_other_dimension_traveler = {
	every_owned_leader = {
		limit = {
			is_dimension_traveler = no
			has_dimension_traveler_subclass = yes
		}
		kill_leader = { show_notification = no }
	}
}

#领袖
set_dimension_traveler_portrait = {
	if = {
		limit = {
			event_target:dimension_traveler_species = { is_species_class = HUM }
		}
		switch = {
			trigger = leader_class
			governor = {
				change_leader_portrait = dimension_traveler_governor_portrait
			}
			scientist = {
				change_leader_portrait = dimension_traveler_scientist_portrait
			}
			admiral = {
				change_leader_portrait = dimension_traveler_admiral_portrait
			}
			general = {
				change_leader_portrait = dimension_traveler_general_portrait
			}
		}
	}
	owner = {
		set_dimension_traveler_event_portrait = yes
	}
}

#国家
set_dimension_traveler_event_portrait = {
	if = {
		limit = {
			exists = event_target:dimension_traveler_leader
		}
		if = {
			limit = {
				event_target:dimension_traveler_portrait_leader = {
					is_dimension_traveler = no
				}
			}
			event_target:dimension_traveler_portrait_leader = {
				kill_leader = { show_notification = no }
			}
			event_target:dimension_traveler_leader = {
				save_global_event_target_as = dimension_traveler_portrait_leader
			}
		}
	}
	else = {
		event_target:dimension_traveler_portrait_leader = {
			kill_leader = { show_notification = no }
		}
		create_leader = {
			class = scientist
			species = event_target:dimension_traveler_species
			name = NAME_Dimension_Traveler
			gender = female
			immortal = yes
			randomize_traits = no
			event_leader = yes
			skill = 1
			set_age = 18
			skip_background_generation = yes
			custom_catch_phrase = dimension_traveler_catch_phrase
			custom_description = dimension_traveler_backstory
			traits = {
				trait = subclass_scientist_dimension_traveler
			}
			effect = {
				if = {
					limit = {
						owner = {
							has_country_flag = dimension_traveler_trait_time_secret
							has_country_flag = dimension_traveler_trait_circle_secret
							has_country_flag = dimension_traveler_trait_dimension_secret
						}
					}
					set_leader_flag = legendary_leader
				}
				else = {
					set_leader_flag = renowned_leader
				}
				set_leader_flag = leader_death_events_blocked
				dimension_traveler_level_up = yes
				set_dimension_traveler_ethic = yes
				save_global_event_target_as = dimension_traveler_portrait_leader
				exile_leader_as = dimension_traveler_portrait_leader
			}
		}
	}
	if = {
		limit = {
			event_target:dimension_traveler_species = { is_species_class = HUM }
		}
		switch = {
			trigger = has_country_flag
			dimension_traveler_governor_active = {
				event_target:dimension_traveler_portrait_leader = {
					change_leader_portrait = dimension_traveler_governor_portrait
				}
			}
			dimension_traveler_scientist_active = {
				event_target:dimension_traveler_portrait_leader = {
					change_leader_portrait = dimension_traveler_scientist_portrait
				}
			}
			dimension_traveler_admiral_active = {
				event_target:dimension_traveler_portrait_leader = {
					change_leader_portrait = dimension_traveler_admiral_portrait
				}
			}
			dimension_traveler_general_active = {
				event_target:dimension_traveler_portrait_leader = {
					change_leader_portrait = dimension_traveler_general_portrait
				}
			}
			default = {
				event_target:dimension_traveler_portrait_leader = {
					change_leader_portrait = dimension_traveler_portrait
				}
			}
		}
	}
}

#全部
play_dimension_traveler_response_sound = {
	if = {
		limit = {
			event_target:dimension_traveler_owner = {
				NOT = { has_country_flag = has_play_dimension_traveler_response_sound } #防止回应界面确认会再次触发音效
			}
		}
		event_target:dimension_traveler_owner = {
			set_timed_country_flag = {
				flag = has_play_dimension_traveler_response_sound
				days = 1
			}
		}
		play_sound = dimension_traveler_response
	}
}

# 国家
give_dimension_traveler_subclass_resource = {
	add_resource = {
		$RESOURCE$ = 1
		mult = prev.value:dimension_traveler_subclass_value|RESOURCE|$RESOURCE$|
	}
}

# 国家
give_dimension_traveler_horror_modifier = {
	switch = {
		trigger = has_country_flag
		dimension_traveler_horror_governor = {
			add_modifier = {
				modifier = dimension_traveler_horror_governor_modifier_$TYPE$
				days = 1
				time_multiplier = value:dimension_traveler_horror_modifier_time|TYPE|$TYPE$|
			}
		}
		dimension_traveler_horror_scientist = {
			add_modifier = {
				modifier = dimension_traveler_horror_scientist_modifier_$TYPE$
				days = 1
				time_multiplier = value:dimension_traveler_horror_modifier_time|TYPE|$TYPE$|
			}
		}
		dimension_traveler_horror_admiral = {
			add_modifier = {
				modifier = dimension_traveler_horror_admiral_modifier_$TYPE$
				days = 1
				time_multiplier = value:dimension_traveler_horror_modifier_time|TYPE|$TYPE$|
			}
		}
		dimension_traveler_horror_general = {
			add_modifier = {
				modifier = dimension_traveler_horror_general_modifier_$TYPE$
				days = 1
				time_multiplier = value:dimension_traveler_horror_modifier_time|TYPE|$TYPE$|
			}
		}
	}
}

# 国家
give_dimension_traveler_horror_modifier_good = {
	hidden_effect = {
		# 设置冷却并触发下一事件（因果爆发与因果过载的总时间）
		remove_country_flag = dimension_traveler_horror_cooldown
		if = {
			limit = {
				has_policy_flag = horror_dimension_traveler
			}
			if = {
				limit = {
					has_country_flag = dimension_traveler_end
				}
				if = {
					limit = {
						has_ascension_perk = ap_time
					}
					trigger_dimension_traveler_horror_modifier_bad_event = { FLAG = 270 EVENT = 180 }
				}
				else_if = {
					limit = {
						has_ascension_perk = ap_horror
					}
					trigger_dimension_traveler_horror_modifier_bad_event = { FLAG = 180 EVENT = 120 }
				}
				else = {
					trigger_dimension_traveler_horror_modifier_bad_event = { FLAG = 90 EVENT = 60 }
				}
			}
			else = {
				trigger_dimension_traveler_horror_modifier_bad_event = { FLAG = 180 EVENT = 120 }
			}
		}
		else = {
			if = {
				limit = {
					has_country_flag = dimension_traveler_end
				}
				if = {
					limit = {
						has_ascension_perk = ap_time
					}
					trigger_dimension_traveler_horror_modifier_bad_event = { FLAG = 135 EVENT = 90 }
				}
				else_if = {
					limit = {
						has_ascension_perk = ap_horror
					}
					trigger_dimension_traveler_horror_modifier_bad_event = { FLAG = 90 EVENT = 60 }
				}
				else = {
					trigger_dimension_traveler_horror_modifier_bad_event = { FLAG = 45 EVENT = 30 }
				}
			}
			else = {
				trigger_dimension_traveler_horror_modifier_bad_event = { FLAG = 90 EVENT = 60 }
			}
		}
	}
	# 获得修正
	give_dimension_traveler_horror_modifier = { TYPE = good }
}

# 国家
trigger_dimension_traveler_horror_modifier_bad_event = {
	# 冷却
	set_timed_country_flag = {
		flag = dimension_traveler_horror_cooldown
		days = $FLAG$
	}
	# 事件的时间没法引用script value，蠢驴！！！
	country_event = {
		id = dimension_traveler.1002
		days = $EVENT$
	}
}